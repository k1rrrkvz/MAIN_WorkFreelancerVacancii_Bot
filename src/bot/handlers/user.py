import os
from aiogram.filters import Command, CommandStart

from aiogram.types import Message

from aiogram import types, F
from aiogram.types import CallbackQuery
from loader import dp, bot

from keyboards.inline import menu   

from database.db import add_user, get_user_data, update_trial_plan_for_user, calculate_remaining_time, get_user_time_registration, is_trial_plan_active, get_user_row_number
from keyboards.reply import cmd_b
#from handlers.admin import admin_panel



@dp.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    if user_data:  

        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Meow –§—Ä–∏–ª–∞–Ω—Å!üòª\n\n"
                             "üöÄ –ù–∞–π–¥–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±—ã—Å—Ç—Ä–æ, —É–¥–æ–±–Ω–æ –∏ –ø—Ä–æ—Å—Ç–æ!\n\n"
                             "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help.\n\n"
                            "–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞–ø–∏—à–∏—Ç–µ /me")
        
        await message.answer("‚ùïÔ∏è –ù–∞–∂–º–∏—Ç–µ /Vacancies, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏")

        await message.answer_photo(
types.FSInputFile(path="src\\bot\\media\\botDescription.png"),
caption=f"‚è≥ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –í–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: \n{calculate_remaining_time(user_id)}"
)
    else:
        add_user(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Meow –§—Ä–∏–ª–∞–Ω—Å!üòª\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")

        await message.answer("üöÄ –ù–∞–π–¥–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±—ã—Å—Ç—Ä–æ, —É–¥–æ–±–Ω–æ –∏ –ø—Ä–æ—Å—Ç–æ!\n\n"
                             "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help.\n\n"
                            "–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞–ø–∏—à–∏—Ç–µ /me")
        
        await message.answer_photo(
types.FSInputFile(path="src\\bot\\media\\botDescription.png"),
caption=f"‚è≥ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –í–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: \n{calculate_remaining_time(user_id)}"
)
        

        
@dp.message(Command("help"))
async def start(message: Message):
    await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"
                             "/start - –Ω–∞—á–∞—Ç—å\n\n"
                             "/me - –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n"
                             "/Vacancies - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π")



@dp.message(Command("me"))
async def infor(message: types.Message):
    user_id = message.from_user.id
    add_user(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    user_data = get_user_data(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    if user_data:
        response = "\n".join([f"üìå {key}: {value}" for key, value in user_data.items()])
    else:
        response = "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    await message.answer(f"‚úÖ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n\n{response}")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /vacancies
@dp.message(Command("Vacancies"))
async def vacancies(message: types.Message):
    user_id = message.from_user.id
    get_user_row_number(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    
    if is_trial_plan_active(user_id):

        await message.answer_photo(
            types.FSInputFile(path="src\\bot\\media\\botDescription.png"),
            caption=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –∞–∫—Ç–∏–≤–Ω–∞. –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å: {calculate_remaining_time(user_id)}"
        )

    else:

        await message.answer_photo(
            types.FSInputFile(path="src\\bot\\media\\botDescription.png"),
            caption="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å"
        )

        await message.answer('‚û§ –ù–∞–∂–º–∏—Ç–µ /tarifs')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∏–∞–ª-–ø–ª–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω
        update_trial_plan_for_user(user_id)



@dp.message(Command("me"))
async def infor(message: types.Message):
    user_id = message.from_user.id
    add_user(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    user_data = get_user_data(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    if user_data:
        response = "\n".join([f"üìå {key}: {value}" for key, value in user_data.items()])
    else:
        response = "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    await message.answer(f"‚úÖ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n\n{response}")


@dp.message(Command("sudo"))
async def infor(message: types.Message):
    if message.from_user.id == int(os.getenv('adminID')):
        await message.answer(f'–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=menu.defShowBotAdminMenu())
    else:
        await message.reply('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º.', reply_markup=menu.defShowBotUserMenu())



@dp.callback_query(lambda c: c.data == 'subscribe')
async def handle_subscribe(callback: types.CallbackQuery):
    await callback.answer('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–∏')
    await callback.message.answer(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID.'
    )

# –ó–∞–±–∏—Ä–∞–µ–º user id –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message()
async def process_message(message: types.Message):
    if message.forward_from:
        user_id = message.forward_from.id
        if get_user_data(user_id):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
            await message.answer(f"–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ", reply_markup=menu.defShowBotAdminSelectSub())
        else:
            await message.answer(f"–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    elif message.reply_to_message and "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" in message.reply_to_message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.")





@dp.message()
async def echo(message: types.Message):
    await message.answer(message.text if message.text else '–ê –≥–¥–µ —Ç–µ–∫—Å—Ç?')



# for admin











    
